import Head from "next/head";
import Link from "next/link";
import type {
  GetStaticPathsContext,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from "next";
import Image from "next/image";
import { gql } from "graphql-request";
import { GraphQLResponse } from "graphql-request/dist/types";
import graphqlRequestClient from "src/lib/clients/graphqlRequestClient";
import InfiniteScroll from "react-infinite-scroll-component";

import { dehydrate, QueryClient } from "@tanstack/react-query";
import { shopifyClient, parseShopifyResponse } from "../lib/shopify";
import { GraphModel } from "shopify-buy";

import ProductGrid from "components/Product/ProductGrid";

import {
  Product,
  GetAllProductsQuery,
  useGetAllProductsQuery,
  useInfiniteGetAllProductsQuery,
} from "src/generated/graphql";

export default function Home() {
  const { isLoading, error, data, isSuccess, fetchNextPage, hasNextPage } =
    useInfiniteGetAllProductsQuery<GetAllProductsQuery, Error>(
      "after",
      graphqlRequestClient,
      {
        after: null,
      },
      {
        // initialData: ,
        getNextPageParam: (lastPage, allPages) => {
          console.log("cursor", lastPage.products.pageInfo.endCursor);
          if (lastPage.products.pageInfo.hasNextPage) {
            return {
              after: lastPage.products.pageInfo.endCursor,
            };
          }
        },
        onSuccess: () => {
          console.log(Date.now(), "Fetching products succeed");
        },
      }
    );

  if (isLoading) return <h1>loading...</h1>;

  if (error) return <h1>{JSON.stringify(error)}</h1>;

  return (
    <div>
      <Head>
        <title>Create Next Shop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-16">
        <ProductGrid productData={data} />
      </main>
    </div>
  );
}

export const getStaticProps = async () => {
  const queryClient = new QueryClient();
  await queryClient.prefetchInfiniteQuery(
    useInfiniteGetAllProductsQuery.getKey({ after: null }),
    useGetAllProductsQuery.fetcher(graphqlRequestClient, { after: null })
  );
  return {
    props: {
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
    },
    revalidate: 180, // In seconds
  };
};
